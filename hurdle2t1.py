import os
import json
import logging
import asyncio
import time
import random
import requests
import pytz
import sqlite3
from datetime import datetime, timedelta
from aiohttp import ClientSession
from collections import defaultdict
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, ChatType
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.utils.exceptions import InvalidQueryID
from aiogram.utils.callback_data import CallbackData

from telethon import TelegramClient, connection, events, sync
from telethon.sessions import StringSession
from telethon.errors import (FloodWaitError, RPCError, SessionPasswordNeededError, PhoneNumberUnoccupiedError,
                             PhoneCodeInvalidError, PhoneNumberInvalidError, AuthKeyUnregisteredError, AuthKeyDuplicatedError)
from telethon.tl.types import (InputReportReasonSpam, InputReportReasonViolence, InputReportReasonChildAbuse,
                               InputReportReasonPornography, InputReportReasonCopyright, InputReportReasonGeoIrrelevant, InputReportReasonOther, InputPhoto)
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.functions.account import ReportProfilePhotoRequest
from telethon.tl.functions.photos import GetUserPhotosRequest
import re
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputReportReasonSpam
from aiogram.dispatcher.filters import Text

remove_sessions_cb = CallbackData("remove_sessions", "sessions")

class BotnetStates(StatesGroup):
    waiting_for_link = State()

logging.basicConfig(filename='logger.txt', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
telethon_logger = logging.getLogger('telethon')
telethon_logger.setLevel(logging.WARNING)
        
with open('token2.txt', 'r') as file:
    TOKEN = file.read().strip()
    
def update_complaints_file():
    try:
        with open("complaints.txt", "r") as file:
            content = file.read().strip()
            total_complaints = int(content) if content else 0
    except FileNotFoundError:
        total_complaints = 0
    except ValueError:
        total_complaints = 0

    total_complaints += 1

    with open("complaints.txt", "w") as file:
        file.write(str(total_complaints))

    return total_complaints

def load_json_file(filename, default):
    try:
        if os.path.exists(filename):
            with open(filename, 'r') as file:
                return json.load(file)
        with open(filename, 'w') as file:
            json.dump(default, file)
        return default
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return default

def save_json_file(filename, data):
    try:
        with open(filename, 'w') as file:
            json.dump(data, file)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        
class SMSStates(StatesGroup):
    waiting_for_text = State()

config = load_json_file('config.json', {'admin_ids': [7478271108], 'allowed_users': {}})
subscriptions = load_json_file('subscriptions.json', {})
banned_users = load_json_file('bans.json', [])

API_ID = '23300181'
API_HASH = 'b5397f2e4d24ddc8a901f36e0b612425'
obratka = [7478271108]
CHANNEL_ID = -1002292993041

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()
scheduler.start()

notified_users = {}

def get_expiration_date(duration):
    if duration.endswith('d'):
        return datetime.now(pytz.utc) + timedelta(days=int(duration[:-1]))
    elif duration.endswith('h'):
        return datetime.now(pytz.utc) + timedelta(hours=int(duration[:-1]))
    else:
        raise ValueError("Invalid duration format")

def format_expiration_date(expiration_date):
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = expiration_date.astimezone(moscow_tz)
    return moscow_time.strftime('%d.%m.%Y %H:%M:%S')

async def notify_expiration(user_id):
    keyboard = InlineKeyboardMarkup()
    button_contact = InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/TEHEB0U")
    button_info = InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/tipadoyes")
    keyboard.add(button_contact, button_info)
    
    await bot.send_message(user_id, "<b>–ø–æ–Ω", reply_markup=keyboard, parse_mode='html')
    
    subscriptions.pop(str(user_id), None)
    config['allowed_users'].pop(str(user_id), None)
    save_json_file('subscriptions.json', subscriptions)
    save_json_file('config.json', config)

async def notify_expiration_soon(user_id):
    keyboard = InlineKeyboardMarkup()
    button_contact = InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/TEHEB0U")
    button_info = InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/tipadoyes")
    keyboard.add(button_contact, button_info)
    
    await bot.send_message(user_id, "<b>–ø–æ–Ω</b>", reply_markup=keyboard, parse_mode='html')

async def check_subscriptions():
    now = datetime.now(pytz.utc)
    to_notify_expiration = []
    to_notify_expiration_soon = []

    for user_id, info in subscriptions.items():
        expiration = info.get('expiration')
        if expiration:
            expiration_date = datetime.strptime(expiration, "%d.%m.%Y %H:%M:%S")
            expiration_date = pytz.utc.localize(expiration_date)
            if expiration_date <= now:
                to_notify_expiration.append(user_id)
            elif expiration_date - timedelta(days=1) <= now and user_id not in notified_users:
                to_notify_expiration_soon.append(user_id)
                notified_users[user_id] = True

    for user_id in to_notify_expiration:
        await notify_expiration(user_id)

    for user_id in to_notify_expiration_soon:
        await notify_expiration_soon(user_id)
        
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = str(message.from_user.id)

    markup = types.InlineKeyboardMarkup(row_width=2)
    chanel = types.InlineKeyboardButton("üõë –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url='http://t.me/send?start=IV16JEwNUu9Q')
    chanetl = types.InlineKeyboardButton("üîß –¢–µ—Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url='http://t.me/amogus_ybit')
    chanell = types.InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", url='https://telegra.ph/Manual-10-25-13')
    chanelil = types.InlineKeyboardButton("üìï –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", url='https://telegra.ph/StraySnos-10-25-2')
    botnet_button = types.InlineKeyboardButton("ü§ñBotNet-Snos", callback_data="botnet")
    markup.add(chanel,chanetl,chanell,chanelil, botnet_button)

    if user_id in subscriptions:
        expiration_date = subscriptions[user_id].get('expiration')
        if expiration_date:
            expiration_date = datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
            expiration_date = pytz.utc.localize(expiration_date)
            if expiration_date > datetime.now(pytz.utc):
                await message.answer_photo(
                    photo=InputFile('hurdle.jpg'),
                    caption=(
                        "<b>‚úü lus…¥·¥ès ‚Äî –º–æ—â–Ω—ã–π –∏ –±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –≤ Telegram. –°–æ—á–µ—Ç–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∞–≥—Ä–µ—Å—Å–∏—é, LuSnos –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Ä–∞—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∂–∞–ª–æ–±—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> "
                        f"{expiration_date.strftime('%d.%m.%Y %H:%M:%S')}"
                    ),
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return

    with open('hurdle.jpg', 'rb') as hurdle2:
        await message.answer_photo(
            photo=hurdle2,
            caption='<b>‚úü lus…¥·¥ès ‚Äî –º–æ—â–Ω—ã–π –∏ –±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –≤ Telegram. –°–æ—á–µ—Ç–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∞–≥—Ä–µ—Å—Å–∏—é, LuSnos –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Ä–∞—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∂–∞–ª–æ–±—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.</b>',
            reply_markup=markup,
            parse_mode='HTML'
        )

@dp.message_handler(state=SMSStates.waiting_for_text)
async def process_sms_text(message: types.Message, state: FSMContext):
    if message.from_user.id == 6211376572:
        sms_text = message.text
        success_count = 0
        fail_count = 0

        for user_id in config['allowed_users']:
            try:
                await bot.send_message(user_id, sms_text)
                success_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logging.error(f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}</b>")
                fail_count += 1

        await state.finish()
        await message.reply(f"<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£–¥–∞—á–Ω–æ: {success_count}\n–ù–µ—É–¥–∞—á–Ω–æ: {fail_count}</b>", parse_mode='html')
    else:
        await message.reply("<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.</b>", parse_mode='html')
        
@dp.message_handler(commands=['add'])
async def add_user(message: types.Message):
    user_id = message.from_user.id
    if user_id in config['admin_ids']:
        try:
            args = message.get_args().split()
            new_user_id = int(args[0])
            duration = args[1] if len(args) > 1 else None
            if str(new_user_id) not in subscriptions:
                expiration_date = get_expiration_date(duration) if duration else None
                expiration_str = format_expiration_date(expiration_date) if expiration_date else None
                subscriptions[str(new_user_id)] = {"expiration": expiration_str}
                config['allowed_users'][str(new_user_id)] = {"expiration": expiration_str}
                save_json_file('subscriptions.json', subscriptions)
                save_json_file('config.json', config)
                if duration:
                    await message.reply(f"<b>–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ {duration}</b>", parse_mode='html')
                    expiration_message = f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {duration}\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expiration_str}</b>" if expiration_date else "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.</b>"
                    await bot.send_message(new_user_id, expiration_message, parse_mode='html')
                    if expiration_date:
                        scheduler.add_job(notify_expiration_soon, 'date', run_date=expiration_date - timedelta(days=1), args=[new_user_id])
                        scheduler.add_job(notify_expiration, 'date', run_date=expiration_date, args=[new_user_id])
                else:
                    await message.reply("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.</b>", parse_mode='html')
                    await bot.send_message(new_user_id, "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.</b>", parse_mode='html')
            else:
                await message.reply("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.</b>", parse_mode='html')
        except (ValueError, IndexError):
            await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <user_id> <duration></b>", parse_mode='html')
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode='html')

username_pattern = re.compile(r'^@(\w+)$')

@dp.message_handler(commands=['id'])
async def get_user_id(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.reply("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ /id @username</b>", parse_mode='HTML')
        return

    username = args[1]
    if not username_pattern.match(username):
        await message.reply("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username</b>", parse_mode='HTML')
        return

    try:
        user = await bot.get_chat(username)
        user_id = user.id
        user_name = user.full_name
        user_type = user.type
        response = (f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\n"
                    f"<b>–ò–º—è:</b> {user_name}\n"
                    f"<b>–¢–∏–ø —á–∞—Ç–∞:</b> {user_type.capitalize()}")
        await message.reply(response, parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        await message.reply(f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}</b>", parse_mode='HTML')
        
@dp.message_handler(commands=['rem'])
async def remove_user(message: types.Message):
    user_id = message.from_user.id
    if user_id in config['admin_ids']:
        try:
            rem_user_id = str(int(message.get_args()))
            if rem_user_id in subscriptions:
                subscriptions.pop(rem_user_id)
                config['allowed_users'].pop(rem_user_id, None)
                save_json_file('subscriptions.json', subscriptions)
                save_json_file('config.json', config)
                await message.reply("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.</b>", parse_mode='html')
            else:
                await message.reply("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode='html')
        except ValueError:
            await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rem <user_id></b>", parse_mode='html')
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode='html')

@dp.message_handler(commands=['obrt'])
async def handle_feedback(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id in banned_users:
        await message.reply("<b>–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.</b>", parse_mode='html')
        return

    feedback_text = message.get_args()
    if feedback_text:
        feedback_message = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username} ({message.from_user.id}):\n\n{feedback_text}</b>"
        await bot.send_message(obratka, feedback_message, parse_mode='html')
        await message.reply("<b>–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>", parse_mode='html')
    else:
        await message.reply("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.</b>", parse_mode='html')
        
@dp.message_handler(commands=['otv'])
async def process_otv_command(message: types.Message):
    if message.from_user.id in config['admin_ids']:
        try:
            args = message.text.split(' ', 2)
            if len(args) < 3:
                await message.reply("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /otv user_id —Ç–µ–∫—Å—Ç</b>", parse_mode="HTML")
                return

            user_id = int(args[1])
            response_text = args[2]
            await bot.send_message(user_id, f'<b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {response_text}', parse_mode="HTML")
            await message.reply("<b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>", parse_mode="HTML")
        except ValueError:
            await message.reply("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.</b>", parse_mode="HTML")
        except Exception as e:
            logging.error(e)
    else:
        await message.reply("<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>", parse_mode="HTML")

@dp.message_handler(commands=['ban'])
async def ban_user(message: types.Message):
    user_id = message.from_user.id
    if user_id in config['admin_ids']:
        try:
            user_to_ban = int(message.get_args())
            if user_to_ban not in banned_users:
                banned_users.append(user_to_ban)
                save_json_file('bans.json', banned_users)
                await message.reply("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.</b>", parse_mode="HTML")
            else:
                await message.reply("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.</b>", parse_mode="HTML")
        except ValueError:
            await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id></b>", parse_mode="HTML")
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")

@dp.message_handler(commands=['unban'])
async def unban_user(message: types.Message):
    user_id = message.from_user.id
    if user_id in config['admin_ids']:
        try:
            user_to_unban = int(message.get_args())
            if user_to_unban in banned_users:
                banned_users.remove(user_to_unban)
                save_json_file('bans.json', banned_users)
                await message.reply("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.</b>", parse_mode="HTML")
            else:
                await message.reply("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.</b>", parse_mode="HTML")
        except ValueError:
            await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id></b>", parse_mode="HTML")
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")

@dp.message_handler(commands=['bans'])
async def list_banned_users(message: types.Message):
    if message.from_user.id in config['admin_ids']:
        if banned_users:
            banned_list = "\n".join(map(str, banned_users))
            await message.reply(f"<b>–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n{banned_list}", parse_mode="HTML")
        else:
            await message.reply("<b>–ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>", parse_mode="HTML")
    else:
        await message.reply("<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>", parse_mode="HTML")

@dp.message_handler(commands=['adda'])
async def add_admin(message: types.Message):
    if message.from_user.id in config['admin_ids']:
        try:
            new_admin_id = int(message.get_args())
            if new_admin_id not in config['admin_ids']:
                config['admin_ids'].append(new_admin_id)
                update_config()
                await message.reply("<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω.</b>", parse_mode="HTML")
            else:
                await message.reply("<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.</b>", parse_mode="HTML")
        except ValueError:
            await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adda <admin_id></b>", parse_mode="HTML")
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")

@dp.message_handler(commands=['rema'])
async def remove_admin(message: types.Message):
    if message.from_user.id in config['admin_ids']:
        try:
            rem_admin_id = int(message.get_args())
            if rem_admin_id in config['admin_ids']:
                config['admin_ids'].remove(rem_admin_id)
                update_config()
                await message.reply("<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω.</b>", parse_mode="HTML")
            else:
                await message.reply("<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        except ValueError:
            await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rema <admin_id></b>", parse_mode="HTML")
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    user_id = message.from_user.id

    help_text = (
        "<b>‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/id <code>username</code> - –£–∑–Ω–∞—Ç—å ID —á–µ–ª–æ–≤–µ–∫–∞\n"
        "/avatar <code>—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º</code> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É\n"
        "/list - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "/my_account - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ\n"
        "/obrt <code>–≤–∞—à —Ç–µ–∫—Å—Ç</code> - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "/reportbot <code>username –±–æ—Ç–∞</code> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –±–æ—Ç–∞"
    )
    if user_id in config['admin_ids']:
        help_text += (
            "<b>\n\n–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/add <code>user id</code> <code>duration</code> - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/rem <code>user id</code> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/ban <code>user id</code> - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/unban <code>user id</code> - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/bans - –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/otv <code>user id</code> <code>text</code> - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
            "/adda <code>admin id</code> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "/rema <code>admin id</code> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "/lists - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/logs <code>id</code> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/state - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        )
    await message.reply(help_text, parse_mode='HTML')

@dp.message_handler(commands=['list'])
async def list_sessions(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id in config['allowed_users'] or user_id in config['admin_ids']:
        session_dir = 'sessions'
        if not os.path.exists(session_dir):
            await message.reply("<b>–ü–∞–ø–∫–∞ sessions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>", parse_mode="HTML")
            return

        session_files = [f for f in os.listdir(session_dir) if f.endswith('.session')]
        session_count = len(session_files)

        await message.reply(f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> {session_count}", parse_mode="HTML")
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")

last_command_time = {}

async def report_entity(session_file, target, report_reason, entity_type):
    session_path = os.path.join('sessions', session_file)

    if not os.path.exists(session_path):
        logging.info(f'[{session_file}]: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return False

    try:
        client = TelegramClient(session_path, API_ID, API_HASH, system_version="4.16.30-vxCUSTOM")
        await client.connect()

        if not await client.is_user_authorized():
            logging.info(f'[{session_file}]: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω')
            await client.disconnect()
            return False

        if "t.me/" in target:
            if '/s/' in target or target.count('/') == 4:
                parts = target.split('/')
                channel = parts[-2]
                message_id = int(parts[-1])

                try:
                    entity = await client.get_entity(channel)
                    await client(ReportRequest(
                        peer=entity,
                        id=[message_id], 
                        reason=report_reason,
                        message=''
                    ))
                except Exception as e:
                    logging.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞: {e}")
                    return False
            else:
                username = target.split('/')[-1]
                entity = await client.get_entity(username)
                await client(ReportRequest(
                    peer=entity,
                    id=[],  
                    reason=report_reason,
                    message=''
                ))
        else:
            entity = await client.get_entity(target)
            await client(ReportRequest(
                peer=entity,
                id=[],  
                reason=report_reason,
                message=''
            ))

        logging.info(f"[{session_file}]: –ñ–∞–ª–æ–±–∞ –Ω–∞ {entity_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        await client.disconnect()
        return True 

    except (SessionPasswordNeededError, PhoneNumberUnoccupiedError, PhoneCodeInvalidError, PhoneNumberInvalidError, AuthKeyUnregisteredError) as e:
        logging.error(f'[{session_file}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã - {str(e)}')
        return False
    except sqlite3.OperationalError as e:
        logging.error(f'[{session_file}]: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - {str(e)}')
        return False
    except AuthKeyDuplicatedError as e:
        logging.error(f'[{session_file}]: –û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - {str(e)}')
        await client.disconnect()
        return False

async def handle_report(message, report_reason, entity_type):
    user_id = str(message.from_user.id)
    logging.info(f"[{user_id}]: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /{entity_type}")
    current_time = time.time()
    cooldown_period = 60
    if user_id not in config['admin_ids']:
        if user_id in last_command_time:
            if current_time - last_command_time[user_id] < cooldown_period:
                remaining_time = int(cooldown_period - (current_time - last_command_time[user_id]))
                await message.reply(f"<b>‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫</b>", parse_mode="HTML")
                return
        last_command_time[user_id] = current_time
    logging.info(f"[{user_id}]: {message.get_args()}")
    if user_id in config['allowed_users'] or user_id in config['admin_ids']:
        try:
            target = message.get_args()
            if not target:
                await message.reply(f"<b>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{entity_type} <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º></b>", parse_mode="HTML")
                return
            status_message = await message.reply("<b> –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–∞—á—É –∂–∞–ª–æ–± –Ω–∞ —Ü–µ–ª—å...</b>", parse_mode="HTML")
            session_files = [f for f in os.listdir('sessions') if f.endswith('.session')]
            success_count = 0
            fail_count = 0
            removed_sessions = []

            async def report_entity_async(session_file, target, report_reason, entity_type):
                result = await report_entity(session_file, target, report_reason, entity_type)
                if result:
                    nonlocal success_count
                    success_count += 1
                else:
                    nonlocal fail_count
                    fail_count += 1
                    removed_sessions.append(session_file)
                await bot.edit_message_text(
                    chat_id=status_message.chat.id,
                    message_id=status_message.message_id,
                    text=(
                        f"<b>üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±...</b>\n"
                        f"<b>‚úÖÔ∏è –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}</b>\n"
                        f"<b>‚ùå –ù–µ—É–ø–µ—à–Ω—ã—Ö: {fail_count}</b>"
                    ),
                    parse_mode="HTML"
                )

            start_time = time.time()
            tasks = []
            for i, session_file in enumerate(session_files):
                tasks.append(report_entity_async(session_file, target, report_reason, entity_type))
                if (i + 1) % 10 == 0:  # —Ç—É—Ç –ø–æ—Å–ª–µ —Å–∫–æ–ª—å–∫–∏ –∂–∞–ª–æ–± –±—É–¥–µ—Ç –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    await asyncio.gather(*tasks)
                    tasks = []
                    await asyncio.sleep(0.5)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 0.5 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ —Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
            if tasks:
                await asyncio.gather(*tasks)
            end_time = time.time()
            elapsed_time = end_time - start_time
            total_complaints = update_complaints_file()
            await bot.edit_message_text(
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
                text=(
                    f"<b>üõ† –ò—Ç–æ–≥–∏.</b>\n"
                    f"<b>‚úÖÔ∏è –£—Å–ø–µ—à–Ω–æ: {success_count}</b>\n"
                    f"<b>‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {fail_count}</b>\n"
                ),
                parse_mode="HTML"
            )
            if removed_sessions:
                removed_sessions_count = len(removed_sessions)
                removed_sessions_list = "\n".join(removed_sessions)
                await bot.send_message(
                    chat_id=6211376572,
                    text=f"<b>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {removed_sessions_count}\n\n–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:\n{removed_sessions_list}</b>",
                    parse_mode="HTML"
                )
        except IndexError:
            await message.reply(f"<b>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{entity_type} <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º></b>", parse_mode="HTML")
    else:
        await message.reply("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")
        
@dp.message_handler(commands=['soso'])
async def spam_report(message: types.Message):
    await handle_report(message, InputReportReasonSpam(), "soso")
    
@dp.message_handler(commands=['state'])
async def state_report(message: types.Message):
    session_files = [f for f in os.listdir('sessions') if f.endswith('.session')]
    accounts_count = len(session_files)

    admin_count = len(config['admin_ids'])

    try:
        with open("complaints.txt", "r") as file:
            content = file.read().strip()
            total_complaints = int(content) if content else 0
    except FileNotFoundError:
        total_complaints = 0
    except ValueError:
        total_complaints = 0

    await message.reply(
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b>\n"
        f"<b>üìà –í—Å–µ–≥–æ –∂–∞–ª–æ–± —Å –±–æ—Ç–∞: {total_complaints}</b>\n"
        f"<b>üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ —Å–∏—Å—Ç–µ–º–µ: {accounts_count}</b>\n"
        f"<b>üëÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {admin_count}</b>\n"
        "<b>üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: https://t.me/+r85cMnKgsm1mOTVi</b>",
        parse_mode="HTML"
    )

@dp.message_handler(commands=['lists'])
async def list_users_and_admins(message: types.Message):
    user_id = message.from_user.id
    if user_id in config['admin_ids']:
        users_list = "\n".join(f"<code>{user_id}</code>" for user_id in config['allowed_users'])
        admins_list = "\n".join(f"<code>{admin_id}</code>" for admin_id in config['admin_ids'])

        response = (
            "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
            f"{users_list}\n\n"
            "<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
            f"{admins_list}"
        )

        await message.reply(response, parse_mode="HTML")
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")
        
@dp.message_handler(commands=['logs'])
async def fetch_logs(message: types.Message):
    user_id = str(message.from_user.id)
    command_user_id = '7478271108'
    
    if user_id != command_user_id:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    target_user_id = message.get_args()
    if not target_user_id:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /logs <user_id>")
        return

    log_file = 'logger.txt'
    temp_log_file = 'logs_user.txt'
    
    try:
        with open(log_file, 'r') as lf, open(temp_log_file, 'w') as tf:
            for line in lf:
                if f"[{target_user_id}]" in line:
                    tf.write(line)
        
        if os.path.getsize(temp_log_file) > 0:
            await message.reply_document(InputFile(temp_log_file))
        else:
            await message.reply("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id.")
    finally:
        if os.path.exists(temp_log_file):
            os.remove(temp_log_file)

@dp.message_handler(commands=['my_account'])
async def my_account(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    subscription_info = subscriptions.get(user_id, {})
    expiration_date = subscription_info.get('expiration')

    if expiration_date:
        expiration_date = datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
        expiration_date = pytz.utc.localize(expiration_date)
        subscription_status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}"
    else:
        subscription_status = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"

    response = (
        f"<b>üë§ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:</b>\n"
        f"<b>üÜî ID:</b> {user_id}\n"
        f"<b>üë§ –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n"
        f"<b>üìÖ –ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}"
    )

    await message.reply(response, parse_mode='HTML')

@dp.message_handler(commands=['avatar'])
async def avatar_report(message: types.Message):
    user_id = str(message.from_user.id)
    logging.info(f"[{user_id}]: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /avatar")

    current_time = time.time()
    cooldown_period = 60

    if user_id not in config['admin_ids']:
        if user_id in last_command_time:
            if current_time - last_command_time[user_id] < cooldown_period:
                remaining_time = int(cooldown_period - (current_time - last_command_time[user_id]))
                await message.reply(f"<b>‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫</b>", parse_mode="HTML")
                return
        last_command_time[user_id] = current_time

    logging.info(f"[{user_id}]: {message.get_args()}")

    if user_id in config['allowed_users'] or user_id in config['admin_ids']:
        try:
            target = message.get_args()
            if not target:
                await message.reply(f"<b>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /avatar <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º></b>", parse_mode="HTML")
                return

            match_username = re.search(r'@(\w+)', target)
            match_link = re.search(r't\.me/(\w+)/(\d+)', target)

            if match_username:
                username = match_username.group(1)
            elif match_link:
                channel_username = match_link.group(1)
                message_id = int(match_link.group(2))

                session_file = sorted([f for f in os.listdir('sessions') if f.endswith('.session')])[0]
                session_path = os.path.join('sessions', session_file)
                client = TelegramClient(session_path, API_ID, API_HASH, system_version="4.16.30-vxCUSTOM")
                await client.connect()

                if not await client.is_user_authorized():
                    logging.info(f'[{session_file}]: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω')
                    await client.disconnect()
                    return

                channel_entity = await client.get_entity(channel_username)
                message = await client.get_messages(channel_entity, ids=message_id)
                username = message.sender_id

                await client.disconnect()
            else:
                await message.reply(f"<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>", parse_mode="HTML")
                return

            status_message = await message.reply("<b>üöÄ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–∫...</b>", parse_mode="HTML")

            async def get_user_photos(session_file, username):
                session_path = os.path.join('sessions', session_file)

                if not os.path.exists(session_path):
                    logging.info(f'[{session_file}]: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                    return []

                try:
                    client = TelegramClient(session_path, API_ID, API_HASH, system_version="4.16.30-vxCUSTOM")
                    await client.connect()

                    if not await client.is_user_authorized():
                        logging.info(f'[{session_file}]: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω')
                        await client.disconnect()
                        return []

                    entity = await client.get_entity(username)
                    photos = await client(GetUserPhotosRequest(
                        user_id=entity,
                        offset=0,
                        max_id=0,
                        limit=100
                    ))

                    await client.disconnect()
                    return photos.photos

                except (SessionPasswordNeededError, PhoneNumberUnoccupiedError, PhoneCodeInvalidError, PhoneNumberInvalidError, AuthKeyUnregisteredError) as e:
                    logging.error(f'[{session_file}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–∫ - {str(e)}')
                    return []

            session_files = sorted([f for f in os.listdir('sessions') if f.endswith('.session')])
            if not session_files:
                await bot.edit_message_text(
                    chat_id=status_message.chat.id,
                    message_id=status_message.message_id,
                    text="<b>‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–∫.</b>",
                    parse_mode="HTML"
                )
                return

            session_file = session_files[0]
            photos = await get_user_photos(session_file, username)

            if not photos:
                await bot.edit_message_text(
                    chat_id=status_message.chat.id,
                    message_id=status_message.message_id,
                    text="<b>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>",
                    parse_mode="HTML"
                )
                return

            keyboard = InlineKeyboardMarkup(row_width=1)
            for i, photo in enumerate(photos):
                keyboard.add(InlineKeyboardButton(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ {i+1}", callback_data=f"avatar_{photo.id}"))

            await bot.edit_message_text(
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
                text=f"<b>–ù–∞–π–¥–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–∫: {len(photos)}</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É—â–Ω–æ—Å—Ç–∏: {e}")
            await message.reply(f"<b>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.</b>", parse_mode="HTML")
        except IndexError:
            await message.reply(f"<b>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /avatar <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º></b>", parse_mode="HTML")
    else:
        await message.reply("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data.startswith('avatar_'))
async def process_callback_avatar(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    photo_id = int(callback_query.data.split('_')[1])

    logging.info(f"[{user_id}]: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É {photo_id}")

    async def report_avatar(session_file, photo_id, username):
        session_path = os.path.join('sessions', session_file)

        if not os.path.exists(session_path):
            logging.info(f'[{session_file}]: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return False

        try:
            client = TelegramClient(session_path, API_ID, API_HASH, system_version="4.16.30-vxCUSTOM")
            await client.connect()

            if not await client.is_user_authorized():
                logging.info(f'[{session_file}]: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω')
                await client.disconnect()
                return False

            target_text = callback_query.message.reply_to_message.text

            try:
                entity = await client.get_entity(username)
            except ValueError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É—â–Ω–æ—Å—Ç–∏: {e}")
                await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.")
                return False

            input_photo = InputPhoto(id=photo_id, access_hash=0, file_reference=b'')

            await client(ReportProfilePhotoRequest(
                peer=entity,
                photo_id=input_photo,
                reason=InputReportReasonSpam(),
                message=''
            ))

            logging.info(f"[{session_file}]: –ñ–∞–ª–æ–±–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É {photo_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            await client.disconnect()
            return True

        except (SessionPasswordNeededError, PhoneNumberUnoccupiedError, PhoneCodeInvalidError, PhoneNumberInvalidError, AuthKeyUnregisteredError) as e:
            logging.error(f'[{session_file}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã - {str(e)}')
            return False

    session_files = sorted([f for f in os.listdir('sessions') if f.endswith('.session')])
    if not session_files:
        await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã.")
        return

    match = re.search(r'@(\w+)', callback_query.message.reply_to_message.text)
    if not match:
        await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    username = match.group(1)

    success_count = 0
    fail_count = 0

    for session_file in session_files:
        result = await report_avatar(session_file, photo_id, username)
        if result:
            success_count += 1
        else:
            fail_count += 1

        if (success_count + fail_count) % 1 == 0:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=f"<b>–£–¥–∞—á–Ω–æ: {success_count}\n–ù–µ—É–¥–∞—á–Ω–æ: {fail_count}</b>",
                    parse_mode="HTML"
                )
            except InvalidQueryID:
                logging.warning("Callback query is too old and response timeout expired.")

    total_complaints = update_complaints_file()

    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=(
                f"<b>‚úÖ –ñ–∞–ª–æ–±—ã –Ω–∞ —Ü–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n"
                f"<b>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±: {success_count}</b>\n"
                f"<b>üõ† –í—Å–µ–≥–æ –∂–∞–ª–æ–± —Å –±–æ—Ç–∞: {total_complaints}</b>\n"
                "<b>‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å</b>"
            ),
            parse_mode="HTML"
        )
    except InvalidQueryID:
        logging.warning("Callback query is too old and response timeout expired.")

@dp.message_handler(commands=['reportbot'])
async def report_bot(message: types.Message):
    user_id = str(message.from_user.id)
    logging.info(f"[{user_id}]: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /reportbot")

    current_time = time.time()
    cooldown_period = 60

    if user_id not in config['admin_ids']:
        if user_id in last_command_time:
            if current_time - last_command_time[user_id] < cooldown_period:
                remaining_time = int(cooldown_period - (current_time - last_command_time[user_id]))
                await message.reply(f"<b>‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫</b>", parse_mode="HTML")
                return
        last_command_time[user_id] = current_time

    logging.info(f"[{user_id}]: {message.get_args()}")

    if user_id in config['allowed_users'] or user_id in config['admin_ids']:
        try:
            target = message.get_args()
            if not target:
                await message.reply(f"<b>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reportbot <bot_id –∏–ª–∏ bot_username></b>", parse_mode="HTML")
                return

            status_message = await message.reply("<b> –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–∞—á—É –∂–∞–ª–æ–±—ã –Ω–∞ –±–æ—Ç–∞...</b>", parse_mode="HTML")
            session_files = [f for f in os.listdir('sessions') if f.endswith('.session')]
            success_count = 0
            fail_count = 0
            removed_sessions = []

            async def report_bot_async(session_file, target):
                session_path = os.path.join('sessions', session_file)

                if not os.path.exists(session_path):
                    logging.info(f'[{session_file}]: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                    return False

                try:
                    client = TelegramClient(session_path, API_ID, API_HASH, system_version="4.16.30-vxCUSTOM")
                    await client.connect()

                    if not await client.is_user_authorized():
                        logging.info(f'[{session_file}]: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω')
                        await client.disconnect()
                        return False

                    entity = await client.get_entity(target)
                    await client(ReportRequest(
                        peer=entity,
                        id=[],
                        reason=InputReportReasonSpam(),
                        message=''
                    ))

                    logging.info(f"[{session_file}]: –ñ–∞–ª–æ–±–∞ –Ω–∞ –±–æ—Ç–∞ {target} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    await client.disconnect()
                    return True

                except (SessionPasswordNeededError, PhoneNumberUnoccupiedError, PhoneCodeInvalidError, PhoneNumberInvalidError, AuthKeyUnregisteredError) as e:
                    logging.error(f'[{session_file}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã - {str(e)}')
                    return False
                except sqlite3.OperationalError as e:
                    logging.error(f'[{session_file}]: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - {str(e)}')
                    return False
                except AuthKeyDuplicatedError as e:
                    logging.error(f'[{session_file}]: –û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - {str(e)}')
                    await client.disconnect()
                    return False

            start_time = time.time()
            tasks = []
            for i, session_file in enumerate(session_files):
                tasks.append(report_bot_async(session_file, target))
                if (i + 1) % 10 == 0:  # —Ç—É—Ç –ø–æ—Å–ª–µ —Å–∫–æ–ª—å–∫–∏ –∂–∞–ª–æ–± –±—É–¥–µ—Ç –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    results = await asyncio.gather(*tasks)
                    for result in results:
                        if result:
                            success_count += 1
                        else:
                            fail_count += 1
                            removed_sessions.append(session_file)
                    tasks = []
                    await asyncio.sleep(0.5)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 0.5 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ —Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
                    await update_status_message(status_message, success_count, fail_count)
            if tasks:
                results = await asyncio.gather(*tasks)
                for result in results:
                    if result:
                        success_count += 1
                    else:
                        fail_count += 1
                        removed_sessions.append(session_file)
            end_time = time.time()
            elapsed_time = end_time - start_time
            total_complaints = update_complaints_file()
            await bot.edit_message_text(
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
                text=(
                    f"<b> –ñ–∞–ª–æ–±–∞ –Ω–∞ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n"
                    f"<b>‚úÖÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±: {success_count}</b>\n"
                    f"<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∂–∞–ª–æ–±: {fail_count}</b>\n"
                    f"<b> –í—Å–µ–≥–æ –∂–∞–ª–æ–± —Å –±–æ—Ç–∞: {total_complaints}</b>\n"
                    f"<b>‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫</b>\n"
                    "<b>‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å</b>"
                ),
                parse_mode="HTML"
            )
            if removed_sessions:
                removed_sessions_count = len(removed_sessions)
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏–∏", callback_data=remove_sessions_cb.new(sessions=','.join(removed_sessions))))
                await bot.send_message(
                    chat_id=6211376572,
                    text=f"<b>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {removed_sessions_count}</b>",
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
        except IndexError:
            await message.reply(f"<b>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reportbot <bot_id –∏–ª–∏ bot_username></b>", parse_mode="HTML")
    else:
        await message.reply("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.</b>", parse_mode="HTML")

async def update_status_message(status_message, success_count, fail_count):
    await bot.edit_message_text(
        chat_id=status_message.chat.id,
        message_id=status_message.message_id,
        text=(
            f"<b> –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–∞—á—É –∂–∞–ª–æ–± –Ω–∞ —Ü–µ–ª—å...</b>\n"
            f"<b>‚úÖÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±: {success_count}</b>\n"
            f"<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∂–∞–ª–æ–±: {fail_count}</b>"
        ),
        parse_mode="HTML"
    )

@dp.callback_query_handler(Text(equals="botnet"))
async def botnet_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("<b>üí† –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ.</b>", parse_mode='HTML')
    await BotnetStates.waiting_for_link.set()

@dp.message_handler(state=BotnetStates.waiting_for_link)
async def process_botnet_link(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if user_id in subscriptions:
        target = message.text
        if not target:
            await message.reply(f"<b>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /botnet <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ></b>", parse_mode="HTML")
            return

        status_message = await message.reply("<b> –ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±.</b>", parse_mode="HTML")
        session_files = [f for f in os.listdir('sessions') if f.endswith('.session')]
        success_count = 0
        fail_count = 0
        removed_sessions = []

        async def report_entity_async(session_file, target):
            result = await report_entity(session_file, target, InputReportReasonSpam(), "acc")
            if result:
                nonlocal success_count
                success_count += 1
            else:
                nonlocal fail_count
                fail_count += 1
                removed_sessions.append(session_file)

        start_time = time.time()
        tasks = []
        for i, session_file in enumerate(session_files):
            tasks.append(report_entity_async(session_file, target))
            if (i + 1) % 10 == 0:  # —Ç—É—Ç –ø–æ—Å–ª–µ —Å–∫–æ–ª—å–∫–∏ –∂–∞–ª–æ–± –±—É–¥–µ—Ç –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await asyncio.gather(*tasks)
                tasks = []
                await asyncio.sleep(0.5)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 0.5 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ —Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
        if tasks:
            await asyncio.gather(*tasks)
        end_time = time.time()
        elapsed_time = end_time - start_time
        total_complaints = update_complaints_file()
        await bot.edit_message_text(
            chat_id=status_message.chat.id,
            message_id=status_message.message_id,
            text=(
                f"<b>ü™¨ –ñ–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.–ò—Ç–æ–≥–∏:</b>\n"
                    
                    f"<b>‚úü –£—Å–ø–µ—à–Ω–æ {success_count}</b>\n"
                    f"<b>‚úü –ù–µ—É—Å–ø–µ—à–Ω–æ: {fail_count}</b>\n"
            ),
            parse_mode="HTML"
        )
        if removed_sessions:
            removed_sessions_count = len(removed_sessions)
            removed_sessions_list = "\n".join(removed_sessions)
            await bot.send_message(
                chat_id=6211376572,
                text=f"<b>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {removed_sessions_count}\n\n–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:\n{removed_sessions_list}</b>",
                parse_mode="HTML"
            )
        await state.finish()
    else:
        await message.reply("<b>‚ùå –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞</b>", parse_mode="HTML")
    
if __name__ == "__main__":
    scheduler.add_job(check_subscriptions, 'interval', hours=1, timezone=pytz.utc)
    executor.start_polling(dp, skip_updates=True)
